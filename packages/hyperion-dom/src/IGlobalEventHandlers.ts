/**
 * Copyright (c) Meta Platforms, Inc. and affiliates. All Rights Reserved.
 */

import { EventHandlerAttributeInterceptor } from "./EventHandlerAttributeInterceptor";
import { IHTMLElementtPrototype } from "./IHTMLElement";

// Technically we can chose any of HTMLElement, SVGElement, or MathElement
const IGlobalEventHandlersPrototype = IHTMLElementtPrototype;

//#region global Event Handlers https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers
export const onabort = new EventHandlerAttributeInterceptor("onabort", IGlobalEventHandlersPrototype);
export const onanimationcancel = new EventHandlerAttributeInterceptor("onanimationcancel", IGlobalEventHandlersPrototype);
export const onanimationend = new EventHandlerAttributeInterceptor("onanimationend", IGlobalEventHandlersPrototype);
export const onanimationiteration = new EventHandlerAttributeInterceptor("onanimationiteration", IGlobalEventHandlersPrototype);
export const onanimationstart = new EventHandlerAttributeInterceptor("onanimationstart", IGlobalEventHandlersPrototype);
export const onauxclick = new EventHandlerAttributeInterceptor("onauxclick", IGlobalEventHandlersPrototype);
export const onblur = new EventHandlerAttributeInterceptor("onblur", IGlobalEventHandlersPrototype);
export const oncanplay = new EventHandlerAttributeInterceptor("oncanplay", IGlobalEventHandlersPrototype);
export const oncanplaythrough = new EventHandlerAttributeInterceptor("oncanplaythrough", IGlobalEventHandlersPrototype);
export const onchange = new EventHandlerAttributeInterceptor("onchange", IGlobalEventHandlersPrototype);
export const onclick = new EventHandlerAttributeInterceptor("onclick", IGlobalEventHandlersPrototype);
export const onclose = new EventHandlerAttributeInterceptor("onclose", IGlobalEventHandlersPrototype);
export const oncontextmenu = new EventHandlerAttributeInterceptor("oncontextmenu", IGlobalEventHandlersPrototype);
export const oncuechange = new EventHandlerAttributeInterceptor("oncuechange", IGlobalEventHandlersPrototype);
export const ondblclick = new EventHandlerAttributeInterceptor("ondblclick", IGlobalEventHandlersPrototype);
export const ondrag = new EventHandlerAttributeInterceptor("ondrag", IGlobalEventHandlersPrototype);
export const ondragend = new EventHandlerAttributeInterceptor("ondragend", IGlobalEventHandlersPrototype);
export const ondragenter = new EventHandlerAttributeInterceptor("ondragenter", IGlobalEventHandlersPrototype);
export const ondragleave = new EventHandlerAttributeInterceptor("ondragleave", IGlobalEventHandlersPrototype);
export const ondragover = new EventHandlerAttributeInterceptor("ondragover", IGlobalEventHandlersPrototype);
export const ondragstart = new EventHandlerAttributeInterceptor("ondragstart", IGlobalEventHandlersPrototype);
export const ondrop = new EventHandlerAttributeInterceptor("ondrop", IGlobalEventHandlersPrototype);
export const ondurationchange = new EventHandlerAttributeInterceptor("ondurationchange", IGlobalEventHandlersPrototype);
export const onemptied = new EventHandlerAttributeInterceptor("onemptied", IGlobalEventHandlersPrototype);
export const onended = new EventHandlerAttributeInterceptor("onended", IGlobalEventHandlersPrototype);
export const onfocus = new EventHandlerAttributeInterceptor("onfocus", IGlobalEventHandlersPrototype);
export const onformdata = new EventHandlerAttributeInterceptor("onformdata", IGlobalEventHandlersPrototype);
export const ongotpointercapture = new EventHandlerAttributeInterceptor("ongotpointercapture", IGlobalEventHandlersPrototype);
export const oninput = new EventHandlerAttributeInterceptor("oninput", IGlobalEventHandlersPrototype);
export const oninvalid = new EventHandlerAttributeInterceptor("oninvalid", IGlobalEventHandlersPrototype);
export const onkeydown = new EventHandlerAttributeInterceptor("onkeydown", IGlobalEventHandlersPrototype);
export const onkeypress = new EventHandlerAttributeInterceptor("onkeypress", IGlobalEventHandlersPrototype);
export const onkeyup = new EventHandlerAttributeInterceptor("onkeyup", IGlobalEventHandlersPrototype);
export const onload = new EventHandlerAttributeInterceptor("onload", IGlobalEventHandlersPrototype);
export const onloadeddata = new EventHandlerAttributeInterceptor("onloadeddata", IGlobalEventHandlersPrototype);
export const onloadedmetadata = new EventHandlerAttributeInterceptor("onloadedmetadata", IGlobalEventHandlersPrototype);
export const onloadstart = new EventHandlerAttributeInterceptor("onloadstart", IGlobalEventHandlersPrototype);
export const onlostpointercapture = new EventHandlerAttributeInterceptor("onlostpointercapture", IGlobalEventHandlersPrototype);
export const onmousedown = new EventHandlerAttributeInterceptor("onmousedown", IGlobalEventHandlersPrototype);
export const onmouseenter = new EventHandlerAttributeInterceptor("onmouseenter", IGlobalEventHandlersPrototype);
export const onmouseleave = new EventHandlerAttributeInterceptor("onmouseleave", IGlobalEventHandlersPrototype);
export const onmousemove = new EventHandlerAttributeInterceptor("onmousemove", IGlobalEventHandlersPrototype);
export const onmouseout = new EventHandlerAttributeInterceptor("onmouseout", IGlobalEventHandlersPrototype);
export const onmouseover = new EventHandlerAttributeInterceptor("onmouseover", IGlobalEventHandlersPrototype);
export const onmouseup = new EventHandlerAttributeInterceptor("onmouseup", IGlobalEventHandlersPrototype);
export const onpause = new EventHandlerAttributeInterceptor("onpause", IGlobalEventHandlersPrototype);
export const onplay = new EventHandlerAttributeInterceptor("onplay", IGlobalEventHandlersPrototype);
export const onplaying = new EventHandlerAttributeInterceptor("onplaying", IGlobalEventHandlersPrototype);
export const onpointercancel = new EventHandlerAttributeInterceptor("onpointercancel", IGlobalEventHandlersPrototype);
export const onpointerdown = new EventHandlerAttributeInterceptor("onpointerdown", IGlobalEventHandlersPrototype);
export const onpointerenter = new EventHandlerAttributeInterceptor("onpointerenter", IGlobalEventHandlersPrototype);
export const onpointerleave = new EventHandlerAttributeInterceptor("onpointerleave", IGlobalEventHandlersPrototype);
export const onpointermove = new EventHandlerAttributeInterceptor("onpointermove", IGlobalEventHandlersPrototype);
export const onpointerout = new EventHandlerAttributeInterceptor("onpointerout", IGlobalEventHandlersPrototype);
export const onpointerover = new EventHandlerAttributeInterceptor("onpointerover", IGlobalEventHandlersPrototype);
export const onpointerup = new EventHandlerAttributeInterceptor("onpointerup", IGlobalEventHandlersPrototype);
export const onprogress = new EventHandlerAttributeInterceptor("onprogress", IGlobalEventHandlersPrototype);
export const onratechange = new EventHandlerAttributeInterceptor("onratechange", IGlobalEventHandlersPrototype);
export const onreset = new EventHandlerAttributeInterceptor("onreset", IGlobalEventHandlersPrototype);
export const onresize = new EventHandlerAttributeInterceptor("onresize", IGlobalEventHandlersPrototype);
export const onscroll = new EventHandlerAttributeInterceptor("onscroll", IGlobalEventHandlersPrototype);
export const onsecuritypolicyviolation = new EventHandlerAttributeInterceptor("onsecuritypolicyviolation", IGlobalEventHandlersPrototype);
export const onseeked = new EventHandlerAttributeInterceptor("onseeked", IGlobalEventHandlersPrototype);
export const onseeking = new EventHandlerAttributeInterceptor("onseeking", IGlobalEventHandlersPrototype);
export const onselect = new EventHandlerAttributeInterceptor("onselect", IGlobalEventHandlersPrototype);
export const onselectionchange = new EventHandlerAttributeInterceptor("onselectionchange", IGlobalEventHandlersPrototype);
export const onselectstart = new EventHandlerAttributeInterceptor("onselectstart", IGlobalEventHandlersPrototype);
export const onslotchange = new EventHandlerAttributeInterceptor("onslotchange", IGlobalEventHandlersPrototype);
export const onstalled = new EventHandlerAttributeInterceptor("onstalled", IGlobalEventHandlersPrototype);
export const onsubmit = new EventHandlerAttributeInterceptor("onsubmit", IGlobalEventHandlersPrototype);
export const onsuspend = new EventHandlerAttributeInterceptor("onsuspend", IGlobalEventHandlersPrototype);
export const ontimeupdate = new EventHandlerAttributeInterceptor("ontimeupdate", IGlobalEventHandlersPrototype);
export const ontoggle = new EventHandlerAttributeInterceptor("ontoggle", IGlobalEventHandlersPrototype);
export const ontouchcancel = new EventHandlerAttributeInterceptor("ontouchcancel", IGlobalEventHandlersPrototype);
export const ontouchend = new EventHandlerAttributeInterceptor("ontouchend", IGlobalEventHandlersPrototype);
export const ontouchmove = new EventHandlerAttributeInterceptor("ontouchmove", IGlobalEventHandlersPrototype);
export const ontouchstart = new EventHandlerAttributeInterceptor("ontouchstart", IGlobalEventHandlersPrototype);
export const ontransitioncancel = new EventHandlerAttributeInterceptor("ontransitioncancel", IGlobalEventHandlersPrototype);
export const ontransitionend = new EventHandlerAttributeInterceptor("ontransitionend", IGlobalEventHandlersPrototype);
export const ontransitionrun = new EventHandlerAttributeInterceptor("ontransitionrun", IGlobalEventHandlersPrototype);
export const ontransitionstart = new EventHandlerAttributeInterceptor("ontransitionstart", IGlobalEventHandlersPrototype);
export const onvolumechange = new EventHandlerAttributeInterceptor("onvolumechange", IGlobalEventHandlersPrototype);
export const onwaiting = new EventHandlerAttributeInterceptor("onwaiting", IGlobalEventHandlersPrototype);
export const onwebkitanimationend = new EventHandlerAttributeInterceptor("onwebkitanimationend", IGlobalEventHandlersPrototype);
export const onwebkitanimationiteration = new EventHandlerAttributeInterceptor("onwebkitanimationiteration", IGlobalEventHandlersPrototype);
export const onwebkitanimationstart = new EventHandlerAttributeInterceptor("onwebkitanimationstart", IGlobalEventHandlersPrototype);
export const onwebkittransitionend = new EventHandlerAttributeInterceptor("onwebkittransitionend", IGlobalEventHandlersPrototype);
export const onwheel = new EventHandlerAttributeInterceptor("onwheel", IGlobalEventHandlersPrototype);
export const onafterprint = new EventHandlerAttributeInterceptor("onafterprint", IGlobalEventHandlersPrototype);
export const onbeforeprint = new EventHandlerAttributeInterceptor("onbeforeprint", IGlobalEventHandlersPrototype);
export const onbeforeunload = new EventHandlerAttributeInterceptor("onbeforeunload", IGlobalEventHandlersPrototype);
export const ongamepadconnected = new EventHandlerAttributeInterceptor("ongamepadconnected", IGlobalEventHandlersPrototype);
export const ongamepaddisconnected = new EventHandlerAttributeInterceptor("ongamepaddisconnected", IGlobalEventHandlersPrototype);
export const onhashchange = new EventHandlerAttributeInterceptor("onhashchange", IGlobalEventHandlersPrototype);
export const onlanguagechange = new EventHandlerAttributeInterceptor("onlanguagechange", IGlobalEventHandlersPrototype);
export const onmessage = new EventHandlerAttributeInterceptor("onmessage", IGlobalEventHandlersPrototype);
export const onmessageerror = new EventHandlerAttributeInterceptor("onmessageerror", IGlobalEventHandlersPrototype);
export const onoffline = new EventHandlerAttributeInterceptor("onoffline", IGlobalEventHandlersPrototype);
export const ononline = new EventHandlerAttributeInterceptor("ononline", IGlobalEventHandlersPrototype);
export const onpagehide = new EventHandlerAttributeInterceptor("onpagehide", IGlobalEventHandlersPrototype);
export const onpageshow = new EventHandlerAttributeInterceptor("onpageshow", IGlobalEventHandlersPrototype);
export const onpopstate = new EventHandlerAttributeInterceptor("onpopstate", IGlobalEventHandlersPrototype);
export const onrejectionhandled = new EventHandlerAttributeInterceptor("onrejectionhandled", IGlobalEventHandlersPrototype);
export const onstorage = new EventHandlerAttributeInterceptor("onstorage", IGlobalEventHandlersPrototype);
export const onunhandledrejection = new EventHandlerAttributeInterceptor("onunhandledrejection", IGlobalEventHandlersPrototype);
export const onunload = new EventHandlerAttributeInterceptor("onunload", IGlobalEventHandlersPrototype);
//#endretion
